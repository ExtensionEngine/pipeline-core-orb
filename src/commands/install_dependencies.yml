description: >
  Install dependencies with caching, optionally choose a package manager.
  Requires execution environment with Node.js >= 16.17 pre-installed.

parameters:
  pkg_manager:
    type: string
    default: $DEFAULT_PKG_MANAGER
    description: |
      Choose Node.js package manager to use. Supports npm and pnpm.
      The package manager must follow the format <name>[@<version|tag>].
      Omitting the version implies that the npm version is determined by the target Node.js environment,
      while pnpm will default to the latest version.
  pkg_json_dir:
    type: string
    default: '.'
    description: >
      Path to the directory containing package.json file.
      Not needed when package.json is in the root.
  install_command:
    type: string
    default: ''
    description: >
      Custom command to install dependencies. Useful when default commands,
      "npm ci" or "pnpm i --frozen-lockfile", are unsuitable.
  cache_version:
    type: string
    default: 'v1'
    description: Change the default cache version if the cache needs to be cleared for some reason.

steps:
  - ensure_pkg_manager:
      ref: <<parameters.pkg_manager>>
  - run:
      name: Check for package.json
      working_directory: <<parameters.pkg_json_dir>>
      command: <<include(scripts/check-pkg-json.sh)>>
  - run:
      name: Process lockfile
      working_directory: <<parameters.pkg_json_dir>>
      command: <<include(scripts/process-lockfile.sh)>>
  - restore_cache:
      keys:
        - node-{{ arch }}-<<parameters.cache_version>>-{{ .Branch }}-{{ checksum "/tmp/node-lockfile" }}
        - node-{{ arch }}-<<parameters.cache_version>>-{{ .Branch }}-
        - node-{{ arch }}-<<parameters.cache_version>>-
  - run:
      name: Install dependencies
      working_directory: <<parameters.pkg_json_dir>>
      environment:
        INSTALL_CMD: <<parameters.install_command>>
      command: <<include(scripts/install-dependencies.sh)>>
  - when:
      condition:
        matches: { pattern: "^npm(.{0,})?$", value: <<parameters.pkg_manager>> }
      steps:
        - save_cache:
            key: node-{{ arch }}-<<parameters.cache_version>>-{{ .Branch }}-{{ checksum "/tmp/node-lockfile" }}
            paths:
              - ~/.npm
  - when:
      condition:
        matches: { pattern: "^pnpm(.{0,})?$", value: <<parameters.pkg_manager>> }
      steps:
        - save_cache:
            key: node-{{ arch }}-<<parameters.cache_version>>-{{ .Branch }}-{{ checksum "/tmp/node-lockfile" }}
            paths:
              - ~/.pnpm-store
  - run:
      name: Remove temporary lockfile
      command: rm -f /tmp/node-lockfile

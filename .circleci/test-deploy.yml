version: 2.1

orbs:
  orb-tools: circleci/orb-tools@12.0
  node: circleci/node@7.1.0
  core: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  ensure-npm-version:
    executor: core/node
    steps:
      - core/ensure_pkg_manager:
          ref: npm@latest
      - run:
          name: Validate version
          command: |
            NPM_LATEST_VERSION=$(npm view npm version)
            if ! npm --version | grep -q "$NPM_LATEST_VERSION"; then
              echo "npm version $NPM_LATEST_VERSION not found"
              exit 1
            fi
  ensure-pnpm-version:
    executor: core/node_secrets
    steps:
      - core/ensure_pkg_manager:
          ref: pnpm@latest
      - run:
          name: Validate version
          command: |
            PNPM_LATEST_VERSION=$(npm view pnpm version)
            if ! pnpm --version | grep -q "$PNPM_LATEST_VERSION"; then
              echo "pnpm version $PNPM_LATEST_VERSION not found"
              exit 1
            fi
  ensure-pnpm-fresh-install:
    docker:
      - image: node:lts-slim
    resource_class: medium
    steps:
      - core/ensure_pkg_manager:
          ref: pnpm
      - run:
          name: Validate version
          command: |
            PNPM_LATEST_VERSION=$(npm view pnpm version)
            if ! pnpm --version | grep -q "$PNPM_LATEST_VERSION"; then
              echo "pnpm version $PNPM_LATEST_VERSION not found"
              exit 1
            fi
  ensure-pnpm-machine-install:
    machine:
      image: ubuntu-2404:current
    steps:
      - node/install
      - core/ensure_pkg_manager:
          ref: pnpm
      - run:
          name: Validate version
          command: |
            PNPM_LATEST_VERSION=$(npm view pnpm version)
            if ! pnpm --version | grep -q "$PNPM_LATEST_VERSION"; then
              echo "pnpm version $PNPM_LATEST_VERSION not found"
              exit 1
            fi
  install-dependencies-npm-node-18:
    executor:
      name: core/node_secrets
      tag: "18"
    steps:
      - checkout
      - core/install_dependencies:
          pkg_manager: npm
          pkg_json_dir: ~/project/sample
          cache_version: node18_v7
      - run: cd ~/project/sample && npm run build
  install-dependencies-pnpm-node-18:
    executor:
      name: core/node
      tag: "18.20"
    steps:
      - checkout
      - core/install_dependencies:
          pkg_manager: pnpm
          pkg_json_dir: ~/project/sample
          cache_version: node18_v7
      - run: cd ~/project/sample && pnpm run build
  install-dependencies-custom-command:
    executor: core/node
    steps:
      - checkout
      - core/install_dependencies:
          pkg_manager: pnpm@10.5.1
          pkg_json_dir: ~/project/sample
          install_command: pnpm install
          cache_version: v10
      - run: cd ~/project/sample && npm run build
  run-script-npm:
    executor: core/node
    steps:
      - checkout
      - core/run_script:
          pkg_manager: npm
          pkg_json_dir: ~/project/sample
          script: test -- --json --outputFile=results_npm.json
      - run:
          name: Print output file
          working_directory: ~/project/sample
          command: cat results_npm.json
  run-script-pnpm:
    executor: core/node
    steps:
      - checkout
      - core/run_script:
          pkg_manager: pnpm@latest-10
          pkg_json_dir: ~/project/sample
          script: test --json --outputFile=results_pnpm.json
      - run:
          name: Print output file
          working_directory: ~/project/sample
          command: cat results_pnpm.json
  run-script-skip-install-dependencies:
    executor: core/node
    steps:
      - checkout
      - core/install_dependencies:
          pkg_manager: pnpm
          pkg_json_dir: ~/project/sample
      - run:
          name: Unset CURRENT_PKG_MANAGER env
          command: echo "export CURRENT_PKG_MANAGER=''" >> "${BASH_ENV}"
      - core/run_script:
          pkg_manager: pnpm
          pkg_json_dir: ~/project/sample
          skip_install_dependencies: true
          script: test --json --outputFile=results_pnpm.json
      - run:
          name: Verfiy install_dependencies was skipped
          command: |
            if [[ -n "${CURRENT_PKG_MANAGER}" ]]; then
              echo "The install_dependencies command was not skipped"
              exit 1
            fi
workflows:
  test-deploy:
    jobs:
      - ensure-npm-version:
          filters: *filters
      - ensure-pnpm-version:
          filters: *filters
      - ensure-pnpm-fresh-install:
          filters: *filters
      - ensure-pnpm-machine-install:
          filters: *filters
      - install-dependencies-npm-node-18:
          filters: *filters
      - install-dependencies-pnpm-node-18:
          filters: *filters
      - install-dependencies-custom-command:
          filters: *filters
      - run-script-npm:
          filters: *filters
      - run-script-pnpm:
          filters: *filters
      - run-script-skip-install-dependencies:
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: studion/core
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires:
            - orb-tools/pack
            - ensure-npm-version
            - ensure-pnpm-version
            - ensure-pnpm-fresh-install
            - ensure-pnpm-machine-install
            - install-dependencies-npm-node-18
            - install-dependencies-pnpm-node-18
            - install-dependencies-custom-command
            - run-script-npm
            - run-script-pnpm
            - run-script-skip-install-dependencies
          context: orb-publishing
          filters: *release-filters
